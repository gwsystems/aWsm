# CI workflow
name: test
on: [push, pull_request]

env:
  # Rust equivalent of -Werror
  RUSTFLAGS: --deny warnings
  # used during LLVM installation
  LLVM_VERSION: 12
  # URLs for WebAssembly libcs
  WASMCEPTION_URL: https://github.com/gwsystems/wasmception/releases/download/v0.2.0/wasmception-linux-x86_64-0.2.0.tar.gz
  WASI_SDK_URL: https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-12/wasi-sdk-12.0-linux.tar.gz
  LIBUV_URL: https://github.com/libuv/libuv/archive/refs/tags/v1.42.0.tar.gz
  UVWASI_URL: https://github.com/nodejs/uvwasi/archive/refs/tags/v0.0.11.tar.gz

# job control
jobs:
  format:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Clang Format
        run: find runtime/* example_code -type f -print | grep --exclude-dir -i -E '^*.(c|h)$' | grep -v runtime/libuv | grep -v runtime/uvwasi | xargs clang-format -Werror -n -ferror-limit=0
  test:
    runs-on: ubuntu-latest
    if: always()

    strategy:
      matrix:
        libc: [wasmception, wasi-sdk]

    steps:
      - uses: actions/checkout@v2

      - name: Install
        run: |
          sudo bash -c "$(wget -O - https://apt.llvm.org/llvm.sh)" bash $LLVM_VERSION
          sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-$LLVM_VERSION 100
          sudo update-alternatives --install /usr/bin/llvm-config llvm-config /usr/bin/llvm-config-$LLVM_VERSION 100
          sudo apt install libc++-dev libc++abi-dev --yes
          # not really sure why we need to modify this
          PATH=/usr/bin:$PATH
          llvm-config --version

      - name: Get wasmception
        if: matrix.libc == 'wasmception'
        run: |
          wget $WASMCEPTION_URL -O wasmception.tar.gz
          mkdir -p wasmception
          tar xvfz wasmception.tar.gz -C wasmception

      - name: Get wasi-sdk
        if: matrix.libc == 'wasi-sdk'
        run: |
          wget $WASI_SDK_URL -O wasi-sdk.tar.gz
          mkdir -p wasi-sdk
          tar xvfz wasi-sdk.tar.gz --strip-components=1 -C wasi-sdk

      - name: Get libuv
        if: matrix.libc == 'wasi-sdk'
        run: |
          wget $LIBUV_URL -O libuv.tar.gz
          mkdir -p ./runtime/libuv
          tar xvfz libuv.tar.gz --strip-components=1 -C ./runtime/libuv
          mkdir -p ./runtime/libuv/build
          cd ./runtime/libuv/build && cmake .. && cmake --build .

      - name: Get uvwasi
        if: matrix.libc == 'wasi-sdk'
        run: |
          wget $UVWASI_URL -O uvwasi.tar.gz
          mkdir -p ./runtime/uvwasi
          tar xvfz uvwasi.tar.gz --strip-components=1 -C ./runtime/uvwasi
          mkdir -p ./runtime/uvwasi/out/cmake
          cd ./runtime/uvwasi/out/cmake && cmake ../.. && cmake --build .

      - name: Compile
        run: |
          cargo build --release

      - name: Preliminary tests
        # note we skip code_benches; we run code_benches/run.py ourselves
        # to pass explicit flags
        run: |
          cargo test -- --skip code_benches

      - name: WASI Tests
        if: matrix.libc == 'wasi-sdk'
        run: |
          make -C tests/wasi all
          cd tests/wasi && bash ./run.sh

      - name: Code benches
        run: |
          ./code_benches/run.py --debug --${{matrix.libc}} -o benchmarks.csv

      - name: Results
        run: cat benchmarks.csv

      - uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.libc}}-benchmarks
          path: benchmarks.csv
