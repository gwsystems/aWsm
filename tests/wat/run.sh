#!/bin/bash

# Tests WASI syscalls via C test programs and wasi-libc

make -k all

declare -a tests_failed=()

TESTING_BACKEND=uvwasi

./align__.${TESTING_BACKEND}.out || tests_failed+=("align::*")
./block__.${TESTING_BACKEND}.out || tests_failed+=("block::*")
./block__break-inner.${TESTING_BACKEND}.out || tests_failed+=("block::break-inner")
./br__.${TESTING_BACKEND}.out || tests_failed+=("br::*")
./br__as-binary-both.${TESTING_BACKEND}.out || tests_failed+=("br::as-binary-both")
./br__as-binary-left.${TESTING_BACKEND}.out || tests_failed+=("br::as-binary-left")
./br__as-block-first.${TESTING_BACKEND}.out || tests_failed+=("br::as-block-first")
./br__as-block-mid.${TESTING_BACKEND}.out || tests_failed+=("br::as-block-mid")
./br__as-block-value-deep.${TESTING_BACKEND}.out || tests_failed+=("br::as-block-value-deep")
./br__as-call_indirect-all.${TESTING_BACKEND}.out || tests_failed+=("br::as-call_indirect-all")
./br__as-call_indirect-first.${TESTING_BACKEND}.out || tests_failed+=("br::as-call_indirect-first")
./br__as-call_indirect-func.${TESTING_BACKEND}.out || tests_failed+=("br::as-call_indirect-func")
./br__as-call_indirect-last.${TESTING_BACKEND}.out || tests_failed+=("br::as-call_indirect-last")
./br__as-call_indirect-mid.${TESTING_BACKEND}.out || tests_failed+=("br::as-call_indirect-mid")
./br__as-call-all.${TESTING_BACKEND}.out || tests_failed+=("br::as-call-all")
./br__as-call-first.${TESTING_BACKEND}.out || tests_failed+=("br::as-call-first")
./br__as-call-last.${TESTING_BACKEND}.out || tests_failed+=("br::as-call-last")
./br__as-call-mid.${TESTING_BACKEND}.out || tests_failed+=("br::as-call-mid")
./br__as-compare-both.${TESTING_BACKEND}.out || tests_failed+=("br::as-compare-both")
./br__as-compare-left.${TESTING_BACKEND}.out || tests_failed+=("br::as-compare-left")
./br__as-compare-right.${TESTING_BACKEND}.out || tests_failed+=("br::as-compare-right")
./br__as-convert-operand.${TESTING_BACKEND}.out || tests_failed+=("br::as-convert-operand")
./br__as-global.set-value.${TESTING_BACKEND}.out || tests_failed+=("br::as-global.set-value")
./br__as-if-cond.${TESTING_BACKEND}.out || tests_failed+=("br::as-if-cond")
./br__as-load-address.${TESTING_BACKEND}.out || tests_failed+=("br::as-load-address")
./br__as-loadN-address.${TESTING_BACKEND}.out || tests_failed+=("br::as-loadN-address")
./br__as-memory.grow-size.${TESTING_BACKEND}.out || tests_failed+=("br::as-memory.grow-size")
./br__as-select-all.${TESTING_BACKEND}.out || tests_failed+=("br::as-select-all")
./br__as-select-cond.${TESTING_BACKEND}.out || tests_failed+=("br::as-select-cond")
./br__as-select-first.${TESTING_BACKEND}.out || tests_failed+=("br::as-select-first")
./br__as-select-second.${TESTING_BACKEND}.out || tests_failed+=("br::as-select-second")
./br__as-store-address.${TESTING_BACKEND}.out || tests_failed+=("br::as-store-address")
./br__as-store-both.${TESTING_BACKEND}.out || tests_failed+=("br::as-store-both")
./br__as-store-value.${TESTING_BACKEND}.out || tests_failed+=("br::as-store-value")
./br__as-storeN-address.${TESTING_BACKEND}.out || tests_failed+=("br::as-storeN-address")
./br__as-storeN-both.${TESTING_BACKEND}.out || tests_failed+=("br::as-storeN-both")
./br__as-storeN-value.${TESTING_BACKEND}.out || tests_failed+=("br::as-storeN-value")
./br__type-f32-f32.${TESTING_BACKEND}.out || tests_failed+=("br::type-f32-f32")
./br__type-f32.${TESTING_BACKEND}.out || tests_failed+=("br::type-f32")
./br__type-f64-f64.${TESTING_BACKEND}.out || tests_failed+=("br::type-f64-f64")
./br__type-f64.${TESTING_BACKEND}.out || tests_failed+=("br::type-f64")
./br__type-i32-i32.${TESTING_BACKEND}.out || tests_failed+=("br::type-i32-i32")
./br__type-i32.${TESTING_BACKEND}.out || tests_failed+=("br::type-i32")
./br__type-i32-value.${TESTING_BACKEND}.out || tests_failed+=("br::type-i32-value")
./br__type-i64-i64.${TESTING_BACKEND}.out || tests_failed+=("br::type-i64-i64")
./br__type-i64.${TESTING_BACKEND}.out || tests_failed+=("br::type-i64")
./br__type-i64-value.${TESTING_BACKEND}.out || tests_failed+=("br::type-i64-value")
./br_if__.${TESTING_BACKEND}.out || tests_failed+=("br_if::*")
./br_table__.${TESTING_BACKEND}.out || tests_failed+=("br_table::*")
./br_table__as-block-first.${TESTING_BACKEND}.out || tests_failed+=("br_table::as-block-first")
./br_table__as-block-mid.${TESTING_BACKEND}.out || tests_failed+=("br_table::as-block-mid")
./br_table__as-call-first.${TESTING_BACKEND}.out || tests_failed+=("br_table::as-call-first")
./br_table__as-call_indirect-first.${TESTING_BACKEND}.out || tests_failed+=("br_table::as-call_indirect-first")
./br_table__as-call_indirect-func.${TESTING_BACKEND}.out || tests_failed+=("br_table::as-call_indirect-func")
./br_table__as-call_indirect-last.${TESTING_BACKEND}.out || tests_failed+=("br_table::as-call_indirect-last")
./br_table__as-call_indirect-mid.${TESTING_BACKEND}.out || tests_failed+=("br_table::as-call_indirect-mid")
./br_table__as-call-last.${TESTING_BACKEND}.out || tests_failed+=("br_table::as-call-last")
./br_table__as-call-mid.${TESTING_BACKEND}.out || tests_failed+=("br_table::as-call-mid")
./br_table__as-compare-left.${TESTING_BACKEND}.out || tests_failed+=("br_table::as-compare-left")
./br_table__as-compare-right.${TESTING_BACKEND}.out || tests_failed+=("br_table::as-compare-right")
./br_table__as-convert-operand.${TESTING_BACKEND}.out || tests_failed+=("br_table::as-convert-operand")
./br_table__as-global.set-value.${TESTING_BACKEND}.out || tests_failed+=("br_table::as-global.set-value")
./br_table__as-if-cond.${TESTING_BACKEND}.out || tests_failed+=("br_table::as-if-cond")
./br_table__as-load-address.${TESTING_BACKEND}.out || tests_failed+=("br_table::as-load-address")
./br_table__as-loadN-address.${TESTING_BACKEND}.out || tests_failed+=("br_table::as-loadN-address")
./br_table__as-loop-first.${TESTING_BACKEND}.out || tests_failed+=("br_table::as-loop-first")
./br_table__as-loop-last.${TESTING_BACKEND}.out || tests_failed+=("br_table::as-loop-last")
./br_table__as-loop-mid.${TESTING_BACKEND}.out || tests_failed+=("br_table::as-loop-mid")
./br_table__as-memory.grow-size.${TESTING_BACKEND}.out || tests_failed+=("br_table::as-memory.grow-size")
./br_table__as-select-first.${TESTING_BACKEND}.out || tests_failed+=("br_table::as-select-first")
./br_table__as-select-second.${TESTING_BACKEND}.out || tests_failed+=("br_table::as-select-second")
./br_table__as-store-address.${TESTING_BACKEND}.out || tests_failed+=("br_table::as-store-address")
./br_table__as-store-value.${TESTING_BACKEND}.out || tests_failed+=("br_table::as-store-value")
./br_table__as-storeN-address.${TESTING_BACKEND}.out || tests_failed+=("br_table::as-storeN-address")
./br_table__as-storeN-value.${TESTING_BACKEND}.out || tests_failed+=("br_table::as-storeN-value")
./br_table__type-f32-value.${TESTING_BACKEND}.out || tests_failed+=("br_table::type-f32-value")
./br_table__type-f32.${TESTING_BACKEND}.out || tests_failed+=("br_table::type-f32")
./br_table__type-f64.${TESTING_BACKEND}.out || tests_failed+=("br_table::type-f64")
./br_table__type-i32-value.${TESTING_BACKEND}.out || tests_failed+=("br_table::type-i32-value")
./br_table__type-i32.${TESTING_BACKEND}.out || tests_failed+=("br_table::type-i32")
./br_table__type-i64-value.${TESTING_BACKEND}.out || tests_failed+=("br_table::type-i64-value")
./br_table__type-i64.${TESTING_BACKEND}.out || tests_failed+=("br_table::type-i64")
./call__.${TESTING_BACKEND}.out || tests_failed+=("call::*")
./call__fib.${TESTING_BACKEND}.out || tests_failed+=("call::fib")
./call_indirect__.${TESTING_BACKEND}.out || tests_failed+=("call_indirect::*")
./conversions__.${TESTING_BACKEND}.out || tests_failed+=("conversions::*")
./conversions__i32.reinterpret_f32.${TESTING_BACKEND}.out || tests_failed+=("conversions::i32.reinterpret_f32")
./conversions__i32.trunc_f32_u.${TESTING_BACKEND}.out || tests_failed+=("conversions::i32.trunc_f32_u")
./conversions__i32.trunc_f64_s.${TESTING_BACKEND}.out || tests_failed+=("conversions::i32.trunc_f64_s")
./conversions__i32.trunc_f64_u.${TESTING_BACKEND}.out || tests_failed+=("conversions::i32.trunc_f64_u")
./conversions__i64.extend_i32_s.${TESTING_BACKEND}.out || tests_failed+=("conversions::i64.extend_i32_s")
./conversions__i64.extend_i32_u.${TESTING_BACKEND}.out || tests_failed+=("conversions::i64.extend_i32_u")
./conversions__i64.trunc_f32_u.${TESTING_BACKEND}.out || tests_failed+=("conversions::i64.trunc_f32_u")
./conversions__i64.trunc_f64_u.${TESTING_BACKEND}.out || tests_failed+=("conversions::i64.trunc_f64_u")
./i32__.${TESTING_BACKEND}.out || tests_failed+=("i32::*")
./i32__clz.${TESTING_BACKEND}.out || tests_failed+=("i32::clz")
./i32__ctz.${TESTING_BACKEND}.out || tests_failed+=("i32::ctz")
./i32__rem_s.${TESTING_BACKEND}.out || tests_failed+=("i32::rem_s")
./i64__.${TESTING_BACKEND}.out || tests_failed+=("i64::*")
./i64__ctz.${TESTING_BACKEND}.out || tests_failed+=("i64::ctz")
./i64__rem_s.${TESTING_BACKEND}.out || tests_failed+=("i64::rem_s")
./if__.${TESTING_BACKEND}.out || tests_failed+=("if::*")
./if__as-unary-operand.${TESTING_BACKEND}.out || tests_failed+=("if::as-unary-operand.${TESTING_BACKEND}")
./loop__.${TESTING_BACKEND}.out || tests_failed+=("loop::*")
./return__.${TESTING_BACKEND}.out || tests_failed+=("return::*")
./select__.${TESTING_BACKEND}.out || tests_failed+=("select::*")
./switch__.${TESTING_BACKEND}.out || tests_failed+=("switch::*")
./unwind__.${TESTING_BACKEND}.out || tests_failed+=("unwind::*")
./unwind__by-br_if-value.${TESTING_BACKEND}.out || tests_failed+=("unwind::by-br_if-value")

for test_failed in "${tests_failed[@]}"; do
	echo "Failed $test_failed"
done

if ((${#test_failed} == 0)); then
	echo "Passed all tests!"
	exit 0
else
	exit 1
fi
